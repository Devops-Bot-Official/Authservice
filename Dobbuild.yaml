version: '1.0'
mode: remote
identifier: AzureCrowRunner
category: Production
username: crowuser
environment:
  # === Crowstore-backed values ===
  SOURCE_URL:   { value: crowstore://authurl }
  GIT_TOKEN:    { value: crowstore://gittoken }
  
  DOCKER_USERNAME:    { value: crowstore://CROWREGNAME }
  DOCKER_PASSWORD:    { value: crowstore://CROWREGNAMEPASS }

  IMAGE_NAME:    { value: crowstore://CROWIMAGENAME }

  # === Testing Environment Variables ===
  JWT_SECRET_KEY:     { value: "ci-test-secret-key-12345" }
  AZURE_POSTGRES_URL: { value: "postgresql://test:test@localhost:5432/test" }
  PYTHONPATH:         { value: "/home/crowuser/login/registration/auth-service" }

  # These must match the *names after* crowstore:// exactly (uppercased, no extra underscores).
  CROWSTORE_TOKEN_AUTHURL:   { value: 70c01fcf939091adb9bdb0054c44b625 }

  CROWSTORE_TOKEN_GITTOKEN:    { value: ee63e33b6b98a72756d732e115a5d256 }
 
  CROWSTORE_TOKEN_CROWREGNAME: { value: 59618baf11885921fbcb491b420b0856 }
  CROWSTORE_TOKEN_CROWREGNAMEPASS: { value: 03ba3a029d583c5c73c4464a9f85cd1d }
  
  CROWSTORE_TOKEN_CROWIMAGENAME: { value: 60af3cd56f11e9dacf79dfb88be15f3e }

jobs:
- name: CROW PROD LOGIN BUILD
  stages:
  - name: Updating Azure Server
    tasks:
      shell:
        enabled: false
        shell: bash
        steps:
        - sudo apt-get update -y
  # ======== Core: Checkout (invokes your Python helper under the hood ) ========
  - name: Git Checkout one
    tasks:
      checkout:
        enabled: true
        private_repo: true
        # --- required / important fields your function expects ---
        clone_dir: /home/crowuser/login
        source_url: env=SOURCE_URL
        branches: 
        - master
        provider: github
        username: Devops-Bot-Official
        token: env=GIT_TOKEN

  # ======== Testing Pipeline Stages ========
  - name: Install System Dependencies
    tasks:
      shell:
        enabled: false
        shell: bash
        steps:
        - sudo apt-get update -y
        - sudo apt-get install -y python3-dev python3-pip python3-venv postgresql-client

  - name: Setup Python Environment
    tasks:
      pip:
        enabled: false
        working_directory: "/home/crowuser/login/registration/auth-service"
        python_bin: "python3"
        use_venv: true
        venv_path: "/home/crowuser/login/registration/auth-service/.venv"
        venv_python: "python3"
        upgrade_pip: true
        pip_check: true
        retries: 3
        retry_delay: 5
        requirements_file: "requirements.txt"
        prefer_binary: true
        only_binary: ":all:"
        steps:
          - install
          - check

  - name: Install Test Dependencies
    tasks:
      pip:
        enabled: false
        working_directory: "/home/crowuser/login/registration/auth-service"
        use_venv: true
        venv_path: "/home/crowuser/login/registration/auth-service/.venv"
        pip_check: true
        retries: 2
        retry_delay: 3
        requirements_file: "test-requirements.txt"
        prefer_binary: true
        steps:
          - install
          - check

  - name: Run Security Tests
    tasks:
      pip:
        enabled: false
        working_directory: "/home/crowuser/login/registration/auth-service"
        use_venv: true
        venv_path: "/home/crowuser/login/registration/auth-service/.venv"
        env:
          AZURE_POSTGRES_URL: "postgresql://test:test@localhost:5432/test"
          JWT_SECRET_KEY: "test-secret-key-for-ci"
          PYTHONPATH: "/home/crowuser/login/registration/auth-service"
        steps:
          - "run python -m pytest tests/test_password_security.py tests/test_jwt_security.py tests/test_tenant_validation.py -v --tb=short"

  - name: Run Core Tests
    tasks:
      pip:
        enabled: false
        working_directory: "/home/crowuser/login/registration/auth-service"
        use_venv: true
        venv_path: "/home/crowuser/login/registration/auth-service/.venv"
        env:
          AZURE_POSTGRES_URL: "postgresql://test:test@localhost:5432/test"
          JWT_SECRET_KEY: "test-secret-key-for-ci"
          PYTHONPATH: "/home/crowuser/login/registration/auth-service"
        steps:
          - "run python -m pytest tests/test_models.py -v --tb=short"

  - name: Run Comprehensive Test Suite
    tasks:
      pip:
        enabled: false
        working_directory: "/home/crowuser/login/registration/auth-service"
        use_venv: true
        venv_path: "/home/crowuser/login/registration/auth-service/.venv"
        env:
          AZURE_POSTGRES_URL: "postgresql://test:test@localhost:5432/test"
          JWT_SECRET_KEY: "test-secret-key-for-ci"
          PYTHONPATH: "/home/crowuser/login/registration/auth-service"
        steps:
          - "run python -m pytest tests/ -x --tb=short --maxfail=5"

  - name: Generate Test Report
    tasks:
      pip:
        enabled: false
        working_directory: "/home/crowuser/login/registration/auth-service"
        use_venv: true
        venv_path: "/home/crowuser/login/registration/auth-service/.venv"
        steps:
          - "run python -c \"print('âœ… All critical security tests passed - Auth service ready for deployment')\""

  - name: Generate Dependency Lockfile
    tasks:
      pip:
        enabled: false
        working_directory: "/home/crowuser/login/registration/auth-service"
        use_venv: true
        venv_path: "/home/crowuser/login/registration/auth-service/.venv"
        freeze_to: "/home/crowuser/login/registration/auth-service/requirements.lock"
        steps:
          - freeze

  - name: Image Build Stage
    tasks:
      docker_build:
        enabled: true
        image_name: env=IMAGE_NAME
        build_tag: V.0.0.5
        dockerfile_path: /home/crowuser/login/auth-service/auth-service/Dockerfile     

  - name: docker push stage
    tasks:
      docker_push:
        enabled: true
        provider: azure
        image_name: env=IMAGE_NAME
        image_tag: V.0.0.5
        username: env=DOCKER_USERNAME
        password: env=DOCKER_PASSWORD
